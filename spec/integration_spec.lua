local cassandra = require "cassandra"

describe("Cassandra", function()
  describe(".new()", function()
    it("should instanciate a session", function()
      local session = cassandra.new()
      assert.truthy(session)
      assert.truthy(session.socket)
      -- TODO: check protocols versions
    end)
  end)

  describe(":connect()", function()
    it("should fail if no contact points are given", function()
      local session = cassandra.new()
      assert.has_error(function()
        session:connect()
      end, "no contact points provided")
    end)
    it("should connect if a contact point is given as a string", function()
      local session = cassandra.new()
      assert.has_no_error(function()
        local ok, err = session:connect("127.0.0.1")
        assert.True(ok)
        assert.falsy(err)
      end)
    end)
    it("should connect if some contact points are given as an array", function()
      local session = cassandra.new()
      assert.has_no_error(function()
        local ok, err = session:connect({"localhost", "127.0.0.1"})
        assert.True(ok)
        assert.falsy(err)
      end)
    end)
    it("should fail if connecting without a session", function()
      assert.has_error(function()
        cassandra.connect({--[[empty session]]}, "127.0.0.1")
      end, "session does not have a socket, create a new session first.")
    end)
    it("should warn is already connected when connecting twice", function()
      local session = cassandra.new()
      local ok, err = session:connect({"localhost", "127.0.0.1"})
      assert.True(ok)
      assert.falsy(err)
      -- 2nd connect
      local ok, err = session:connect({"localhost", "127.0.0.1"})
      assert.False(ok)
      assert.equal("already connected", err)
    end)
    it("should try another host if others fail", function()
      local session = cassandra.new()
      local ok, err = session:connect({"0.0.0.1", "0.0.0.2", "0.0.0.3", "127.0.0.1"})
      assert.True(ok)
      assert.falsy(err)
    end)
    it("should return error if it fails to connect to all hosts", function()
      local session = cassandra.new()
      local ok, err = session:connect({"0.0.0.1", "0.0.0.2", "0.0.0.3"})
      assert.False(ok)
      assert.same("No route to host", err)
    end)
    it("should connect to a given port", function()
      local session = cassandra.new()
      local ok, err = session:connect("127.0.0.1", 9042)
      assert.True(ok)
      assert.falsy(err)
    end)
    it("should accept overriding the port for some hosts", function()
      -- If a contact point is of form "host:port", this port will overwrite the one given as parameter of `connect`
      local session = cassandra.new()
      local ok, err = session:connect({"127.0.0.1:9042"}, 9999)
      assert.True(ok)
      assert.falsy(err)
    end)
  end)

  describe(":execute()", function()
    local session
    setup(function()
      session = cassandra.new()
      local ok, err = session:connect("127.0.0.1")
      assert.True(ok)
    end)
    it("should execute a query", function()
      local res, err = session:execute("SELECT cql_version, native_protocol_version, release_version FROM system.local")
      assert.truthy(res)
      assert.falsy(err)
    end)
    it("should return a Cassandra error", function()
      local res, err = session:execute("DESCRIBE")
      assert.falsy(res)
      local inspect = require "inspect"
      print(inspect(err))
    end)
  end)

end)
