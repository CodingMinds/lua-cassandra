local auth_providers = require "cassandra.auth"

describe("auth providers", function()
  describe("plain_text", function()
    local plain_text = auth_providers.plain_text
    it("should be instanciable", function()
      local auth = plain_text.new("username", "password")
      assert.is_table(auth)
    end)
    it("should require a username", function()
      assert.has_error(function()
        plain_text()
      end, "arg #1 must be a string (username)")
    end)
    it("should require a password", function()
      assert.has_error(function()
        plain_text("username")
      end, "arg #2 must be a string (password)")
      local trace = debug.traceback()
      assert.matches("spec/01-unit/05-policies_auth_spec.lua", trace, nil, true)
    end)
    it("should implement initial_response()", function()
      local auth = plain_text("username", "password")
      assert.is_function(auth.initial_response)
    end)
    describe("initial_response()", function()
      it("should return properly formatted message", function()
        local auth = plain_text("username", "password")
        local msg = auth:initial_response()
        assert.equal("\0username\0password", msg)
      end)
    end)
  end)
end)
